# Project Clearwater - IMS in the Cloud
# Copyright (C) 2015  Metaswitch Networks Ltd
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version, along with the "Special Exception" for use of
# the program along with SSL, set forth below. This program is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details. You should have received a copy of the GNU General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
# The author can be reached by email at clearwater@metaswitch.com or by
# post at Metaswitch Networks Ltd, 100 Church St, Enfield EN2 6BQ, UK
#
# Special Exception
# Metaswitch Networks Ltd  grants you permission to copy, modify,
# propagate, and distribute a work formed by combining OpenSSL with The
# Software, or a work derivative of such a combination, even if such
# copying, modification, propagation, or distribution would otherwise
# violate the terms of the GPL. You must comply with the GPL in all
# respects for all of the code used other than OpenSSL.
# "OpenSSL" means OpenSSL toolkit software distributed by the OpenSSL
# Project and licensed under the OpenSSL Licenses, or a work based on such
# software and licensed under the OpenSSL Licenses.
# "OpenSSL Licenses" means the OpenSSL License and Original SSLeay License
# under which the OpenSSL Project distributes the OpenSSL toolkit software,
# as those licenses appear in the file LICENSE-OPENSSL.

heat_template_version: 2013-05-23

description: >
  FHoSS node for Clearwater

parameters:
  public_mgmt_net_id:
    type: string
    description: ID of public management network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  private_mgmt_net_id:
    type: string
    description: ID of private management network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  public_sig_net_id:
    type: string
    description: ID of public signaling network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  flavor:
    type: string
    description: Flavor to use
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a valid flavor name
  image:
    type: string
    description: Name of image to use
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid image name
  key_name:
    type: string
    description: Name of keypair to assign
    constraints:
      - custom_constraint: nova.keypair
        description: Must be a valid keypair name
  base_mgmt_security_group:
    type: string
    description: ID of base security group for all Clearwater nodes (management)
  fhoss_mgmt_security_group:
    type: string
    description: Security group for FHoSS (management)
  fhoss_sig_security_group:
    type: string
    description: Security group for FHoSS (signaling)
  zone:
    type: string
    description: DNS zone
    default: example.com
  dns_mgmt_ip:
    type: string
    description: IP address for DNS server
  dns_sig_ip:
    type: string
    description: IP address for DNS server on signaling network
  dnssec_key:
    type: string
    description: DNSSEC private key (Base64-encoded)
    constraints:
      - allowed_pattern: "[0-9A-Za-z+/=]+"
        description: Must be Base64-encoded

resources:
  sig_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: public_sig_net_id }
      security_groups:
        - { get_param: fhoss_sig_security_group }

  mgmt_port:
    type: OS::Neutron::Port
    properties:
      # Specify the network ID by string to work around OpenStack issues - see https://github.com/Metaswitch/clearwater-heat/issues/18.
      network_id: { str_replace: { params: { x: { get_param: private_mgmt_net_id } }, template: x } }
      security_groups:
        - { get_param: base_mgmt_security_group }
        - { get_param: fhoss_mgmt_security_group }

  mgmt_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_mgmt_net_id }
      port_id: { get_resource: mgmt_port }

  server:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: {__zone__: { get_param: zone } }, template: fhoss.__zone__ } }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: mgmt_port }
        - port: { get_resource: sig_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __zone__: { get_param: zone }
            __public_mgmt_ip__: { get_attr: [ mgmt_floating_ip, floating_ip_address ] }
            __private_mgmt_ip__: { get_attr: [ mgmt_port, fixed_ips, 0, ip_address ] }
            __public_sig_ip__: { get_attr: [ sig_port, fixed_ips, 0, ip_address ] }
            __dns_mgmt_ip__: { get_param: dns_mgmt_ip }
            __dns_sig_ip__: { get_param: dns_sig_ip }
            __dnssec_key__: { get_param: dnssec_key }
          template: |
            #!/bin/bash

            # Log all output to file.
            exec > >(tee -a /var/log/clearwater-heat-fhoss.log) 2>&1
            set -x

            # Set up eth1 for signaling
            ip addr add __public_sig_ip__/64 dev eth1
            ip link set dev eth1 up
            ip route add default via fd5f:5d21:845:1402::2

            # Configure the APT software source.
            add-apt-repository ppa:rkd-u/fhoss #s
            apt-get update #s

            # Prepare to install the OpenIMS HSS noninteractively
            # We want different signaling and management IPs. FHoSS installer
            # doesn't deal with this and we'll need to give Tomcat the
            # management IP afterwards as it doesn't like listening on ::.
            #s all
            debconf-set-selections <<< "openimscore-fhoss       openimscore-fhoss/ip_to_use     string ::"
            debconf-set-selections <<< "openimscore-fhoss       openimscore-fhoss/hss_config    select yes"
            # The default user should be enough for our purposes
            # sudo debconf-set-selections <<< "openimscore-fhoss       openimscore-fhoss/adding_user   string"
            debconf-set-selections <<< "openimscore-fhoss       openimscore-fhoss/where_is_java string /usr/bin/java"
            debconf-set-selections <<< "openimscore-fhoss       openimscore-fhoss/dns_ip_to_use string"
            debconf-set-selections <<< "openimscore-fhoss       openimscore-fhoss/domain_to_use string __zone__"
            debconf-set-selections <<< "openimscore-fhoss       openimscore-fhoss/sql_password  string"
            debconf-set-selections <<< "openimscore-fhoss       openimscore-fhoss/sql_data      select yes"
            DEBIAN_FRONTEND="noninteractive" apt-get -y --force-yes install openimscore-fhoss

            # Appease Tomcat by giving it an explicit IP to listen on
            sed -i "s/::/__private_mgmt_ip__/" /usr/share/java/fhoss-0.2/hss.properties
            service openimscore-fhoss restart

            # Function to give DNS record type and IP address for specified IP address
            ip2rr() {
              if echo $1 | grep -q -e '[^0-9.]' ; then
                echo AAAA $1
              else
                echo A $1
              fi
            }

            # Update DNS
            retries=0
            while ! { nsupdate -y "__zone__:__dnssec_key__" -v << EOF
            server __dns_mgmt_ip__
            update add fhoss.__zone__. 30 $(ip2rr __public_sig_ip__)
            send
            EOF
            } && [ $retries -lt 10 ]
            do
              retries=$((retries + 1))
              echo 'nsupdate failed - retrying (retry '$retries')...'
              sleep 5
            done

            # Use the DNS server.
            apt-get -y --force-yes install dnsmasq #s
            echo 'nameserver __dns_mgmt_ip__' > /etc/dnsmasq.resolv.conf
            echo 'RESOLV_CONF=/etc/dnsmasq.resolv.conf' >> /etc/default/dnsmasq
            service dnsmasq force-reload

            # Set up some subscribers for testing
            apt-get -y install python-mysqldb

            cat > /usr/share/java/fhoss-0.2/provision_subs.py << EOF
            import MySQLdb as m

            cxn = m.connect('localhost', 'root', '', 'hss_db')
            cur = cxn.cursor()

            def provision(number):
                impi = number + "@__zone__"
                impu = "sip:" + impi
                
                cur.execute("INSERT INTO imsu (name, scscf_name, diameter_name, id_capabilities_set, id_preferred_scscf_set) VALUES (%s,'','',-1,-1);", (number,));
                imsu_row = cur.lastrowid

                cur.execute("INSERT INTO impi (id_imsu,identity,k,auth_scheme,default_auth_scheme,amf,op,sqn,ip,line_identifier,zh_uicc_type,zh_key_life_time,zh_default_auth_scheme) VALUES (%s,%s,'test',128,128,'\0\0','\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0','000000000000','','',0,3600,1);", (imsu_row, impi));
                impi_row = int(cur.lastrowid);

                cur.execute("INSERT INTO impu (identity,type,barring,user_state,id_sp,id_implicit_set,id_charging_info,wildcard_psi,display_name,psi_activation,can_register) VALUES (%s,0,0,0,1,0,-1,'','',0,1);", (impu,));
                impu_row = int(cur.lastrowid);

                cur.execute("UPDATE impu set id_implicit_set=%s where id=%s", (impu_row, impu_row))

                cur.execute("INSERT INTO impu_visited_network (id_impu, id_visited_network) VALUES (%s,1);", (impu_row,))
                cur.execute("INSERT INTO impi_impu (id_impi,id_impu,user_state) VALUES (%s,%s,0);", (impi_row, impu_row))

                print impu

            provision("imhotep")
            provision("lovelace")
            provision("dave")

            cxn.close()

            EOF

            python /usr/share/java/fhoss-0.2/provision_subs.py

outputs:
  public_mgmt_ip:
    description: IP address in public management network
    value: { get_attr: [ mgmt_floating_ip, floating_ip_address ] }
  private_mgmt_ip:
    description: IP address in private management network
    value: { get_attr: [ mgmt_port, fixed_ips, 0, ip_address ] }
  public_sig_ip:
    description: IP address in public signaling network
    value: { get_attr: [ sig_port, fixed_ips, 0, ip_address ] }